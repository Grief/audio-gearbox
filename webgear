#!/usr/bin/python
import argparse, dbus, dbus.service, gobject, os, signal, socket, struct, time
from dbus.mainloop.glib import DBusGMainLoop

if __name__ == '__main__':
    BUS_NAME, OBJECT_PATH = 'io.github.grief', '/WebGear'
    TRIES = 15

    def message(msg): print msg

    class Monitor(dbus.service.Object):
        # noinspection PyMissingConstructor
        def __init__(self):
            self.bus = dbus.SessionBus(mainloop=DBusGMainLoop())
            self.was = 'unknown'

        def active_changed(self, locking):
            if locking: self.was = control('pause')
            elif self.was == 'playing': control('play')

        def get_pid(self):
            try: return self.bus.get_object(BUS_NAME, OBJECT_PATH).getPid()
            except dbus.exceptions.DBusException: return None

        def stop(self):
            pid = self.get_pid()
            if pid is None: return message('Not running')
            for i in xrange(1, TRIES):
                os.kill(pid, signal.SIGINT)
                time.sleep(i / 10.0)
                pid = self.get_pid()
                if pid is None: return message('Stopped')
            print 'Failed to stop'
            exit(-1)

        def start(self):
            if self.get_pid() is not None: return message('Already running')
            if os.fork() != 0: return message('Started')
            dbus.service.Object.__init__(self, dbus.service.BusName(BUS_NAME, bus=self.bus), OBJECT_PATH)
            self.bus.get_object('org.freedesktop.ScreenSaver', '/ScreenSaver').connect_to_signal('ActiveChanged', self.active_changed)

            loop = gobject.MainLoop()
            try: loop.run()
            except KeyboardInterrupt: pass

        @dbus.service.method('io.github.grief.webgear', out_signature='i')
        def getPid(self): return os.getpid()

    def control(action):
        sock = socket.socket()
        sock.connect(('localhost', 4851))
        count = len(action)
        sock.send(struct.pack('>i{}s'.format(count), count, action))
        count = struct.unpack('>i', sock.recv(4))[0]
        return sock.recv(count)

    actions = {
        'start': lambda: Monitor().start(),
        'stop' : lambda: Monitor().stop()
    }
    controls = ['toggle', 'play', 'pause', 'prev', 'next']

    parser = argparse.ArgumentParser('WebGear client tool')
    parser.add_argument('action', choices=controls + actions.keys())
    action = parser.parse_args().action
    if action in controls: control(action)
    else: actions[action]()

